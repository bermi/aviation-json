#!/usr/bin/env node

"use strict";

var fs = require("fs");
var program = require("commander");
var version = require("../package.json").version;

var scrapeJs = require("./scrape.js");
var reduceAirlines = scrapeJs.reduceAirlines;
var reduceAirports = scrapeJs.reduceAirports;
var reduceDestinations = scrapeJs.reduceDestinations;
var generateAirportCity = scrapeJs.generateAirportCity;
var getAirportRunways = scrapeJs.getAirportRunways;
var getCityAirports = scrapeJs.getCityAirports;
var getAirportAirlines = scrapeJs.getAirportAirlines;

var destinationsRaw = require("../tmp/airline_destinations.json");
var airportsRaw = require("../tmp/airports.json");
var airlinesRaw = require("../tmp/airlines_data.json");

var DESTINATIONS_FILE = "./data/airline_destinations.json";
var AIRPORTS_FILE = "./data/airports.json";
var AIRLINES_FILE = "./data/airlines.json";
var AIRPORT_CITIES_FILE = "./data/airport_cities.json";
var RUNWAYS_FILE = "./data/airport_runways.json";
var CITIES_FILE = "./data/city_airports.json";
var AIRPORT_AIRLINES_FILE = "./data/airport_airlines.json";

var destinations, airports, airlines, airlineCities, airportRunways,cityAirports, airportAirlines;

program
  .version(version)
  .description("This package uses aviation-scraper to get the information and prepare it for a database usage")
  .option("destinations", "generates the destinations with only the primary keys.")
  .option("airports", "generates the airports file.")
  .option("airlines", "generates the airlines file")
  .option("cities", "generates the airports - cities file")
  .option("runways", "generates the airport_runway.json file")
  .option("airport_airlines", "generates the file with list of airlines per airport.")
  .parse(process.argv);

if (!process.argv.slice(2).length) {
  program.help();
}

if (program.airport_airlines) {
  airportAirlines = getAirportAirlines(destinationsRaw);
  saveFile(AIRPORT_AIRLINES_FILE, airportAirlines, logDone);
}

if (program.runways) {
  airportRunways = getAirportRunways(airportsRaw);
  saveFile(RUNWAYS_FILE, airportRunways, logDone);
}

if (program.cities) {
  airlineCities = generateAirportCity(destinationsRaw);
  cityAirports = getCityAirports(destinationsRaw);

  saveFile(AIRPORT_CITIES_FILE,airlineCities,function() {
    saveFile(CITIES_FILE, cityAirports, logDone);
  });
}
if (program.airlines) {
  airlines = reduceAirlines(airlinesRaw);
  saveFile(AIRLINES_FILE, airlines, logDone);
}

if (program.destinations){
  destinations = reduceDestinations(destinationsRaw);
  saveFile(DESTINATIONS_FILE, destinations, logDone);
}

if (program.airports) {
  airports = reduceAirports(airportsRaw);
  saveFile(AIRPORTS_FILE, airports, logDone);
}

function logDone() {
  console.log("file Saved");//eslint-disable-line no-console
}

function saveFile(dir, data, callback) {
  fs.writeFile(dir, JSON.stringify(data,null, 2), function(err) {
    if (err) {throw err;}
    callback();
  });
  
}
